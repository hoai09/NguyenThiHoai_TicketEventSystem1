@page "/events/{EventId:int}"
@inject GetEventByIdUseCase GetEventByIdUseCase
@inject NavigationManager NavigationManager
<PageTitle>@currentEvent?.Name</PageTitle>
@if (currentEvent == null)
{
     <p><em>Đang tải...</em></p>
    ;
}
else
{
    <div class="card">
        <div class="card-header"><h3>@currentEvent.Name</h3></div>
        <div class="card-body">
            <p><strong>Ngày:</strong> @currentEvent.Date.ToString("dd/MM/yyyy HH:mm")</p>
            <p><strong>Địa điểm:</strong> @currentEvent.Location</p>
            <p><strong>Mô tả:</strong> @(currentEvent.Description ?? "Không có mô tả.")</p>
            <p><strong>Vé còn lại:</strong> @(currentEvent.TicketLimit - currentEvent.Registrations.Count) / @currentEvent.TicketLimit</p>
        </div>
        <div class="card-footer">
            <AuthorizeView>
                <NotAuthorized><a href="Identity/Account/Login?returnUrl=@NavigationManager.Uri" class="btn btn-primary">Đăng nhập để đăng ký</a></NotAuthorized>
                <Authorized><RegistrationButton EventId="@EventId" OnRegistrationComplete="RefreshPage" /></Authorized>
            </AuthorizeView>
        </div>
    </div>
    <AuthorizeView Roles="Admin"><Authorized><AttendeeList EventId="@EventId" /></Authorized></AuthorizeView>
}
@code {
    [Parameter] public int EventId { get; set; }
    private Event? currentEvent;
    protected override async Task OnInitializedAsync() => await LoadEvent();
    private async Task LoadEvent() => currentEvent = await GetEventByIdUseCase.ExecuteAsync(EventId);
    private async Task RefreshPage() { await LoadEvent(); StateHasChanged(); }
}